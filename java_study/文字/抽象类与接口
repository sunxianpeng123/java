1、final
    （1）final修饰类与方法
        当类声明为final时，该类为终极类（类的最终版本），
    不能被子类所继承。
        当方法声明为final时，该方法为终极方法（方法的最终
    版本），不能被子类所重写。

    （2）final的应用：
        1 某些方法（类）已经实现的很完善，不需要子类再去
    扩展。
        2 处于安全考虑，阻止子类去修改父类的实现。

    （3）当一个类声明为final时，类中所有的方法都隐式为final。
        当方法是final时，由于该方法不能被子类重写，
    在编译期间就可以决定调用哪一个方法，因此可以
    提高一定的性能。
2、抽象类与抽象方法
    （1）抽象类与抽象方法
        a、抽象类与抽象方法使用abstract修饰。
        b、当类中某些功能（方法）不方便（或不知道）给出具体
    实现，如果实现时，我们就可以将该类声明为抽象类。
    而不方便（不知道）实现的方法声明为抽象方法。
        c、抽象方法没有方法体。（{}也没有）
    （2） 抽象类是一个实现不完整的类，其设计的目的
    就是为了让子类去继承的。抽象方法设计的目的
    就是为了让子类去重写的（当父类的方法是抽象方法时，
    也习惯说成子类实现父类的方法。）。
    （3）当类中含有抽象方法时，该类必须要声明为抽象类。
    反之，当一个类声明为抽象类时，该类可以没有抽象
    方法。
    （4）我们不能够创建抽象类的对象。（抽象类是实现不完整的类。）
    但是，我们依然可以声明抽象类的引用，使其指向子类
    的对象。
    （5）当子类继承了抽象的父类，子类就必须要实现抽象父类中
    所有的抽象方法。否则，子类就需要也要声明为抽象类。
3、接口类型
    （1）接口指的是一种规范，该规范指出各个实现者
    能够做到什么样的结果，而具体实现的细节，各个
    实现者可以根据需要各自的需要灵活进行控制。
    （2）接口声明：
    interface
        接口表示一种规范，该规范是通过接口中的抽象方法
    来声明。该规范有类（class）来实现（implmenets）。
    如果一个类实现了接口，则该类必须遵守接口中声明
    的规范。即类需要实现接口中所有的抽象方法。否则，
    该类必须声明为抽象类。
4、接口的成员
        接口中可以声明变量（常量），抽象方法，
    默认方法，静态方法，内部类型（不考虑）。
        1 接口中声明的成员变量一律是public，
    static，final类型的。
        2 接口中声明的普通方法一律是public，
    abstract类型的。
        3 即使1,2中的关键字不显式声明也是如此。
    根据惯例，省略以上的关键字。
        接口中所有的成员都是public类型的。无论我们
    是否显式声明都是如此。
5、接口的继承
        接口的继承与类的继承不同。在Java中，类只支持
    单继承，即一个子类只能继承一个父类，而接口支持
    多继承，即一个子接口可以同时继承多个父接口。

        当子接口继承父接口，子接口会继承父接口中的成员。
    子接口可以继承父接口中的成员变量，抽象方法，
    默认方法，但是，不能继承父接口中的静态方法。
    对于接口中声明的静态方法，直通通过声明该静态方法的
    接口名进行访问。
6、接口的实现
        接口设计的目的是为了让实现类去实现的。
    类使用implements实现接口，一个类可以
    实现多个接口，使用","进行分隔。
        当一个类实现了某个接口，该类就会成为
    接口的子类型（接口成为该类的父类型），
    类可以继承接口中声明的成员。
        类可以继承接口中声明的成员变量，抽象方法，
    默认方法。但是，类不能继承接口中声明的静态方法。

        因为接口中含有抽象的方法，所以，我们也不能创建
    接口类型的对象。尽管如此，我们依然可以声明接口
    类型的引用，令其指向实现类的对象。
        通过父类型的引用，不能访问子类型新增的成员。
        1 通过父类的引用，不能访问子类新增的成员。
        2 通过接口的引用，不能访问实现类新增的成员。
8、子接口与默认方法
        接口作为一种规范，一旦发布，就不能随意进行更改。
    否则就会对各个实现者造成很大的影响。

    怎样升级可以不对实现者造成影响：
        1 使用子接口继承现有的接口，发布一个新的规范（对
    原有规范的一个升级）
        2 从JavaSE 8起，也可以选择第二种升级方法：增加
    默认方法。